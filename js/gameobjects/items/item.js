/**
 * Created by ad on 30.01.15.
 */

var Item = function (name) {

    // general property
    this.name = name;

    // having an item on a field does not prevent someone from walking on it
    //this.isBlocking = false;

    // gets generated by subclasses
    this.model = null;

    // container is either inventory or null
    this.container = null;
};

/**
 * This is used as a reference to the constructors of all
 * final subclasses implementing Item. This is needed so we can
 * call Item.serialize(something) on any object implementing Item
 * as the serialize function will just call the appropriate subclass.
 *
 * This needs to be filled by each final subclass itself!
 * @type {{Weapon: Weapon}}
 */
Item.FINAL_CLASSES = {};


/**
 * check all FINAL_CLASSES for the correct one for the given
 * item and serialize it using that class, saving the FINAL_CLASSEs
 * key as reference to load the object later on
 *
 * @param item
 */
Item.serialize = function (item) {
    var saved = null;
    Object.keys(Item.FINAL_CLASSES).forEach(function (key) {
        if (item instanceof Item.FINAL_CLASSES[key]) {
            saved = {
                "key": key,
                "object": Item.FINAL_CLASSES[key].serialize(item)
            };
        }
    });
    if (!saved) throw new EvalError("cant find class!");
    return saved;
};

/**
 * look up the class in FINAL_CLASSES and delegate to that deserialize function
 * @param saved
 * @returns {*}
 */
Item.deserialize = function (saved) {
    return Item.FINAL_CLASSES[saved.key].deserialize(saved.object);
};

/**
 * default tostring for items
 * @returns {string}
 */
Item.prototype.toString = function(){
  return "Item: " + this.name;
};

//------------------

/**
 * Equippable items
 * @param name
 * @param equipSlot
 * @constructor
 */
var EquippableItem = function (name, equipSlot) {

    Item.call(this, name);

    this.equipSlot = equipSlot || Inventory.SLOTS.HEAD;

};

// should i use Item or Item.prototype ?
EquippableItem.prototype = Object.create(Item.prototype);


EquippableItem.prototype.generateModel = function(){
    throw new EvalError("Not implemented here");
};
